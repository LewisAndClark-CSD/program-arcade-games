     
     Chapter 06 Worksheet

     
     For each of the first two questions, write out your best guess as to what the
     code will print. Clearly label this as your guess. Then run the code and look at
     the output. Write if your guess was correct. If it was not, briefly describe what
     was different and why.

     Predicting what the code will do is important in writing programs, and
     figuring out why programs don't run the way expected.
     
  1. What does this program print out?
     (Remember: TWO answers. Your guess and the actual result. Label both.)
     
     x = 0
     while x < 10:
         print(x)
         x = x + 2
     Guess: Prints out 0, 2, 4, 6, and 8 on seperate lines.
     Answer: Prints out 0, 2, 4, 6, and 8 on seperate lines.
     
  2. What does this program print out?
     
     x = 1
     while x < 64:
         print(x)
         x = x * 2
     Guess: Prints out 1, 2, 4, 8, 16, and 32 on seperate lines.
     Answer: Prints out 1, 2, 4, 8, 16, and 32 on seperate lines.
     
  3. Why is the and x >= 0 not needed?
     
     x = 0
     while x < 10 and x >= 0:
         print(x)
         x = x + 2
     It does not need to be checked because x is set to start at 0, and there is no chance of it ever going down in value.
     
  4. What does this program print out? (0 pts) Explain. (1 pt)
     
     x = 5
     while x >= 0:
         print(x)
         if x == "1":
             print("Blast off!")
         x = x - 1
     This program prints out 5, 4, 3, 2, and 1 on seperate lines. This prints only that out because an integer can never equal a string, because the programmer put quotations around 1, it will never be equal to that and will then never print out "Blast off!".
     
  5. Fix the following code so it doesn't repeat forever, and keeps asking
     the user until he or she enters a number greater than zero: (2 pts)
     
     x = float(input("Enter a number greater than zero: "))

     while x <= 0:
         print("Too small. Enter a number greater than zero: ")
    
    To fix this error of looping forever you must set the print statement under the while loop to x, as previously it was only taking the first number that you had entered as x, and couldn't change it. The other thing you must add to make this program work is simply replace the x in the while loop with int(x).
     
  6. Fix the following code:
     
     x = 10

     while x < 0:
         print(x)
         x - 1

     print("Blast-off")
     
     To fix this code you have to switch the '<' to a '>' as before this switch this is telling the program that if x is less than 0, then do the loop. Because x is set to 10, this will never happen and it will only print out "Blast-off." The only other thing to fix about the program coding is to set x to x - 1 (aka x = x - 1) 'x -1' does nothing.
     
  7. What is wrong with this code? It runs but it has unnecessary code.
     Find all the unneeded code. Also, answer why it is not needed. (1 pt)
     
     i = 0
     for i in range(10):
         print(i)
         i += 1
         
    The first thing that I noticed that the coding did not need was the 'i = 10.' This is because the loop already has a range of what i is, so the coder does not need to set it beforehand. The other piece of coding not needed for this program to run would be 'i += 1' as the range works as a stepper do basically do this already, with the help of the print statement as well to show the numbers. 
     
  8. Explain why the values printed for x are so different. (2 pts)
     
     # Sample 1
     x = 0
     for i in range(10):
         x += 1
     for j in range(10):
         x += 1
     print(x)

     # Sample 2
     x = 0
     for i in range(10):
         x += 1
         for j in range(10):
             x += 1
     print(x)
     
     The 1st sample prints out '20' while the 2nd one prints out '110'. The difference between the two codings are how the for loops are set up, the first being seperate and the second being nested. The first one does each loop seperately and only does j when i is finished, but the second one does j while i is still functioning. The first is only doing i 10 times and j 10 times, but the second one is doing j 10 times for each time i is done, so bascially 100 times, plus the 10 that i does. 
      
